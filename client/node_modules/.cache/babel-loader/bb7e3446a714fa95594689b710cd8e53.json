{"ast":null,"code":"var _jsxFileName = \"/home/deepanshu/Documents/trio-calls/client/src/pages/meet/dashboard/components/SidePanel/Polls.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { useSnackbar } from \"notistack\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport Box from \"@material-ui/core/Box\";\nimport PollModal from \"./Poll/Modal\";\nimport PollAlert from \"./Poll/Form\";\nimport { useSocket } from \"core/hooks/useSocket\";\nimport { useAppSelector } from \"core/hooks/redux\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Polls = _ref => {\n  _s();\n\n  let {\n    isHost\n  } = _ref;\n  const socketClient = useSocket();\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const [openModal, setOpenModal] = React.useState(false);\n  const poll = useAppSelector(state => state.meetReducer.poll);\n\n  const handlePress = () => {\n    setOpenModal(true);\n  };\n\n  const createPoll = React.useCallback(pollData => {\n    socketClient.emit(\"newPoll\", pollData);\n    enqueueSnackbar(\"Poll Published\");\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(PollModal, {\n      pollHandler: createPoll,\n      open: openModal,\n      onClose: () => setOpenModal(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), !poll.question ? /*#__PURE__*/_jsxDEV(Box, {\n      py: 3,\n      display: \"flex\",\n      justifyContent: \"center\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        width: \"90\",\n        alt: \"Poll Icon\",\n        src: \"https://avatars.slack-edge.com/2020-05-09/1112549471909_7543dde099089941d3c3_512.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(PollAlert, { ...poll\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this), isHost ? /*#__PURE__*/_jsxDEV(Button, {\n      fullWidth: true,\n      startIcon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 22\n      }, this),\n      variant: \"text\",\n      color: \"secondary\",\n      onClick: handlePress,\n      children: \"Create a poll\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this) : !poll.question && /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h5\",\n      align: \"center\",\n      color: \"textSecondary\",\n      children: \"Polls will appear here\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Polls, \"jc4unlKnnrA5Ki/rV3R9r2eoT48=\", false, function () {\n  return [useSocket, useSnackbar, useAppSelector];\n});\n\n_c = Polls;\nexport default Polls;\n\nvar _c;\n\n$RefreshReg$(_c, \"Polls\");","map":{"version":3,"sources":["/home/deepanshu/Documents/trio-calls/client/src/pages/meet/dashboard/components/SidePanel/Polls.tsx"],"names":["React","Button","useSnackbar","AddIcon","Box","PollModal","PollAlert","useSocket","useAppSelector","Typography","Polls","isHost","socketClient","enqueueSnackbar","openModal","setOpenModal","useState","poll","state","meetReducer","handlePress","createPoll","useCallback","pollData","emit","question"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAASC,WAAT,QAA4B,WAA5B;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAASC,SAAT,QAA0B,sBAA1B;AAEA,SAASC,cAAT,QAA+B,kBAA/B;AACA,OAAOC,UAAP,MAAuB,8BAAvB;;;;AAMA,MAAMC,KAAsB,GAAG,QAAgB;AAAA;;AAAA,MAAf;AAAEC,IAAAA;AAAF,GAAe;AAC7C,QAAMC,YAAY,GAAGL,SAAS,EAA9B;AACA,QAAM;AAAEM,IAAAA;AAAF,MAAsBX,WAAW,EAAvC;AACA,QAAM,CAACY,SAAD,EAAYC,YAAZ,IAA4Bf,KAAK,CAACgB,QAAN,CAAe,KAAf,CAAlC;AACA,QAAMC,IAAI,GAAGT,cAAc,CAAEU,KAAD,IAAWA,KAAK,CAACC,WAAN,CAAkBF,IAA9B,CAA3B;;AACA,QAAMG,WAAW,GAAG,MAAM;AACxBL,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAFD;;AAIA,QAAMM,UAAU,GAAGrB,KAAK,CAACsB,WAAN,CAAmBC,QAAD,IAAwB;AAC3DX,IAAAA,YAAY,CAACY,IAAb,CAAkB,SAAlB,EAA6BD,QAA7B;AACAV,IAAAA,eAAe,CAAC,gBAAD,CAAf;AACD,GAHkB,EAGhB,EAHgB,CAAnB;AAKA,sBACE;AAAA,4BACE,QAAC,SAAD;AACE,MAAA,WAAW,EAAEQ,UADf;AAEE,MAAA,IAAI,EAAEP,SAFR;AAGE,MAAA,OAAO,EAAE,MAAMC,YAAY,CAAC,KAAD;AAH7B;AAAA;AAAA;AAAA;AAAA,YADF,EAMG,CAACE,IAAI,CAACQ,QAAN,gBACC,QAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAY,MAAA,OAAO,EAAC,MAApB;AAA2B,MAAA,cAAc,EAAC,QAA1C;AAAA,6BACE;AACE,QAAA,KAAK,EAAE,IADT;AAEE,QAAA,GAAG,EAAC,WAFN;AAGE,QAAA,GAAG,EAAC;AAHN;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADD,gBASC,QAAC,SAAD,OAAeR;AAAf;AAAA;AAAA;AAAA;AAAA,YAfJ,EAiBGN,MAAM,gBACL,QAAC,MAAD;AACE,MAAA,SAAS,MADX;AAEE,MAAA,SAAS,eAAE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,cAFb;AAGE,MAAA,OAAO,EAAC,MAHV;AAIE,MAAA,KAAK,EAAC,WAJR;AAKE,MAAA,OAAO,EAAES,WALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADK,GAWL,CAACH,IAAI,CAACQ,QAAN,iBACE,QAAC,UAAD;AAAY,MAAA,OAAO,EAAC,IAApB;AAAyB,MAAA,KAAK,EAAC,QAA/B;AAAwC,MAAA,KAAK,EAAC,eAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YA7BN;AAAA,kBADF;AAqCD,CAnDD;;GAAMf,K;UACiBH,S,EACOL,W,EAEfM,c;;;KAJTE,K;AAoDN,eAAeA,KAAf","sourcesContent":["import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { useSnackbar } from \"notistack\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport Box from \"@material-ui/core/Box\";\nimport PollModal from \"./Poll/Modal\";\nimport PollAlert from \"./Poll/Form\";\nimport { useSocket } from \"core/hooks/useSocket\";\nimport { PollType } from \"./Poll/PollType\";\nimport { useAppSelector } from \"core/hooks/redux\";\nimport Typography from \"@material-ui/core/Typography\";\n\ntype Props = {\n  isHost?: boolean;\n};\n\nconst Polls: React.FC<Props> = ({ isHost }) => {\n  const socketClient = useSocket();\n  const { enqueueSnackbar } = useSnackbar();\n  const [openModal, setOpenModal] = React.useState(false);\n  const poll = useAppSelector((state) => state.meetReducer.poll);\n  const handlePress = () => {\n    setOpenModal(true);\n  };\n\n  const createPoll = React.useCallback((pollData: PollType) => {\n    socketClient.emit(\"newPoll\", pollData);\n    enqueueSnackbar(\"Poll Published\");\n  }, []);\n\n  return (\n    <>\n      <PollModal\n        pollHandler={createPoll}\n        open={openModal}\n        onClose={() => setOpenModal(false)}\n      />\n      {!poll.question ? (\n        <Box py={3} display=\"flex\" justifyContent=\"center\">\n          <img\n            width={\"90\"}\n            alt=\"Poll Icon\"\n            src=\"https://avatars.slack-edge.com/2020-05-09/1112549471909_7543dde099089941d3c3_512.png\"\n          />\n        </Box>\n      ) : (\n        <PollAlert {...poll} />\n      )}\n      {isHost ? (\n        <Button\n          fullWidth\n          startIcon={<AddIcon />}\n          variant=\"text\"\n          color=\"secondary\"\n          onClick={handlePress}\n        >\n          Create a poll\n        </Button>\n      ) : (\n        !poll.question && (\n          <Typography variant=\"h5\" align=\"center\" color=\"textSecondary\">\n            Polls will appear here\n          </Typography>\n        )\n      )}\n    </>\n  );\n};\nexport default Polls;\n"]},"metadata":{},"sourceType":"module"}