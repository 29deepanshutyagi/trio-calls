{"ast":null,"code":"var _jsxFileName = \"/home/deepanshu/Documents/trio-calls/client/src/pages/meet/dashboard/components/SidePanel/Poll/Modal.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Radio from \"@material-ui/core/Radio\";\nimport TextField from \"@material-ui/core/TextField\";\nimport AddCircleOutlineOutlinedIcon from \"@material-ui/icons/AddCircleOutlineOutlined\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport Grid from \"@material-ui/core/Grid\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PollCreator = _ref => {\n  _s();\n\n  let {\n    onClose = () => \"\",\n    open = false,\n    pollHandler\n  } = _ref;\n  const [question, setQuestion] = React.useState(\"\");\n  const [options, setOptions] = React.useState([\"\", \"\"]);\n  const [correct, setCorrect] = React.useState(\"\");\n\n  const handleClick = () => {\n    pollHandler({\n      question,\n      options,\n      correct\n    });\n    setQuestion(\"\");\n    setOptions([\"\", \"\"]);\n    onClose();\n  };\n\n  return /*#__PURE__*/_jsxDEV(Dialog, {\n    open: open,\n    \"aria-labelledby\": \"poll modal\",\n    onClose: onClose,\n    children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n      children: \"New Poll\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Question\",\n        variant: \"filled\",\n        size: \"small\",\n        fullWidth: true,\n        rows: 3,\n        multiline: true,\n        rowsMax: 3,\n        value: question,\n        onChange: event => setQuestion(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), options.map((value, index) => {\n        return /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          alignItems: \"center\",\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              placeholder: \"Option \" + (index + 1),\n              margin: \"normal\",\n              variant: \"outlined\",\n              value: value,\n              onChange: event => {\n                const opts = options;\n                opts[index] = event.target.value;\n                setOptions([...opts]);\n              },\n              InputProps: {\n                startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n                  position: \"start\",\n                  children: /*#__PURE__*/_jsxDEV(Radio, {\n                    checked: Boolean(value && value === correct),\n                    onChange: event => setCorrect(event.target.value),\n                    value: value,\n                    inputProps: {\n                      \"aria-label\": value\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 75,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 74,\n                  columnNumber: 23\n                }, this),\n                endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n                  position: \"end\",\n                  children: /*#__PURE__*/_jsxDEV(IconButton, {\n                    \"aria-label\": \"delete option\",\n                    onClick: () => {\n                      const opts = options;\n                      opts.splice(index, 1);\n                      setOptions([...opts]);\n                    },\n                    children: /*#__PURE__*/_jsxDEV(CloseIcon, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 93,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 85,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 84,\n                  columnNumber: 23\n                }, this)\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(Button, {\n        fullWidth: true,\n        startIcon: /*#__PURE__*/_jsxDEV(AddCircleOutlineOutlinedIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 22\n        }, this),\n        variant: \"text\",\n        color: \"default\",\n        onClick: () => {\n          setOptions([...options, \"\"]);\n        },\n        children: \"Add option\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleClick,\n        size: \"small\",\n        disabled: !options.length || !question,\n        variant: \"contained\",\n        color: \"primary\",\n        children: \"Create\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: onClose,\n        color: \"default\",\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PollCreator, \"lntm8Azse/86E+1DPfGbyg1wSNc=\");\n\n_c = PollCreator;\nexport default PollCreator;\n\nvar _c;\n\n$RefreshReg$(_c, \"PollCreator\");","map":{"version":3,"sources":["/home/deepanshu/Documents/trio-calls/client/src/pages/meet/dashboard/components/SidePanel/Poll/Modal.tsx"],"names":["React","Button","Radio","TextField","AddCircleOutlineOutlinedIcon","Dialog","DialogContent","DialogTitle","DialogActions","Grid","IconButton","CloseIcon","InputAdornment","PollCreator","onClose","open","pollHandler","question","setQuestion","useState","options","setOptions","correct","setCorrect","handleClick","event","target","value","map","index","opts","startAdornment","Boolean","endAdornment","splice","length"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Radio from \"@material-ui/core/Radio\";\nimport TextField from \"@material-ui/core/TextField\";\nimport AddCircleOutlineOutlinedIcon from \"@material-ui/icons/AddCircleOutlineOutlined\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport Grid from \"@material-ui/core/Grid\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport { PollType } from \"./PollType\";\n\ntype PollCreatorProps = {\n  open?: boolean;\n  onClose?: () => unknown;\n  pollHandler: (pollData: PollType) => unknown;\n};\n\nconst PollCreator: React.FC<PollCreatorProps> = ({\n  onClose = () => \"\",\n  open = false,\n  pollHandler,\n}) => {\n  const [question, setQuestion] = React.useState(\"\");\n  const [options, setOptions] = React.useState([\"\", \"\"] as string[]);\n  const [correct, setCorrect] = React.useState(\"\");\n\n  const handleClick = () => {\n    pollHandler({\n      question,\n      options,\n      correct,\n    });\n    setQuestion(\"\");\n    setOptions([\"\", \"\"]);\n    onClose();\n  };\n\n  return (\n    <Dialog open={open} aria-labelledby=\"poll modal\" onClose={onClose}>\n      <DialogTitle>New Poll</DialogTitle>\n      <DialogContent>\n        <TextField\n          label=\"Question\"\n          variant=\"filled\"\n          size=\"small\"\n          fullWidth\n          rows={3}\n          multiline\n          rowsMax={3}\n          value={question}\n          onChange={(event) => setQuestion(event.target.value)}\n        />\n        {options.map((value, index) => {\n          return (\n            <Grid container key={index} alignItems=\"center\">\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  placeholder={\"Option \" + (index + 1)}\n                  margin=\"normal\"\n                  variant=\"outlined\"\n                  value={value}\n                  onChange={(event) => {\n                    const opts = options;\n                    opts[index] = event.target.value;\n                    setOptions([...opts]);\n                  }}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">\n                        <Radio\n                          checked={Boolean(value && value === correct)}\n                          onChange={(event) => setCorrect(event.target.value)}\n                          value={value}\n                          inputProps={{ \"aria-label\": value }}\n                        />\n                      </InputAdornment>\n                    ),\n                    endAdornment: (\n                      <InputAdornment position=\"end\">\n                        <IconButton\n                          aria-label=\"delete option\"\n                          onClick={() => {\n                            const opts = options;\n                            opts.splice(index, 1);\n                            setOptions([...opts]);\n                          }}\n                        >\n                          <CloseIcon />\n                        </IconButton>\n                      </InputAdornment>\n                    ),\n                  }}\n                />\n              </Grid>\n            </Grid>\n          );\n        })}\n\n        <Button\n          fullWidth\n          startIcon={<AddCircleOutlineOutlinedIcon />}\n          variant=\"text\"\n          color=\"default\"\n          onClick={() => {\n            setOptions([...options, \"\"]);\n          }}\n        >\n          Add option\n        </Button>\n      </DialogContent>\n      <DialogActions>\n        <Button\n          onClick={handleClick}\n          size=\"small\"\n          disabled={!options.length || !question}\n          variant=\"contained\"\n          color=\"primary\"\n        >\n          Create\n        </Button>\n        <Button onClick={onClose} color=\"default\">\n          Cancel\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\nexport default PollCreator;\n"]},"metadata":{},"sourceType":"module"}