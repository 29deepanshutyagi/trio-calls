{"ast":null,"code":"var _s = $RefreshSig$();\n\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport React from \"react\";\nimport { getChat } from \"@arpitbhalla/trio-calls/utils/chat.fetch\";\nimport { useEffect, useState } from \"react\";\nimport { useAppDispatch, useAppSelector } from \"core/hooks/redux\";\nimport { useSocket } from \"./useSocket\";\nimport { addChat, clearChat, initialChat } from \"core/reducers/chat\";\nimport { useSnackbar } from \"notistack\";\nexport const useMsgs = meetID => {\n  _s();\n\n  const socketClient = useSocket();\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const [loading, setLoading] = useState(false);\n  const [meetTitle, setMeetTitle] = useState(\"\");\n  const {\n    UID,\n    displayName\n  } = useAppSelector(_ref => {\n    let {\n      authReducer: {\n        UID,\n        displayName\n      }\n    } = _ref;\n    return {\n      UID,\n      displayName\n    };\n  });\n  const dispatch = useAppDispatch();\n  useEffect(() => {\n    if (!meetID) return;\n    resetChat();\n    setLoading(true);\n    getChat(UID, meetID).then(response => {\n      dispatch(initialChat(response.chats));\n      setMeetTitle(response.meetTitle);\n      setLoading(false);\n    }).catch(err => {\n      enqueueSnackbar(err || \"Something went wrong\", {\n        variant: \"error\"\n      });\n    });\n  }, [meetID, UID]);\n  useEffect(() => {\n    if (!meetID) return;\n    socketEvents();\n  }, []);\n\n  const socketEvents = () => {\n    socketClient.on(\"newMessage\", messageData => {\n      console.log(messageData);\n      dispatch(addChat({\n        MID: messageData._id,\n        UID: messageData.UID,\n        displayName: messageData.displayName || \"\",\n        message: messageData.message || \"\",\n        time: messageData.createdAt || \"\"\n      }));\n    });\n  };\n\n  const sendMessage = React.useCallback(message => {\n    socketClient.emit(\"sendMessage\", {\n      displayName,\n      message,\n      UID\n    });\n  }, []);\n\n  const resetChat = () => {\n    dispatch(clearChat());\n  };\n\n  return {\n    sendMessage,\n    resetChat,\n    loading,\n    meetTitle\n  };\n};\n\n_s(useMsgs, \"O/2AnhsE0Hx+AFNUDIa676hr/Ms=\", false, function () {\n  return [useSocket, useSnackbar, useAppSelector, useAppDispatch];\n});","map":{"version":3,"sources":["/home/deepanshu/Documents/trio-calls/client/src/core/hooks/useMsgs.tsx"],"names":["React","getChat","useEffect","useState","useAppDispatch","useAppSelector","useSocket","addChat","clearChat","initialChat","useSnackbar","useMsgs","meetID","socketClient","enqueueSnackbar","loading","setLoading","meetTitle","setMeetTitle","UID","displayName","authReducer","dispatch","resetChat","then","response","chats","catch","err","variant","socketEvents","on","messageData","console","log","MID","_id","message","time","createdAt","sendMessage","useCallback","emit"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport React from \"react\";\nimport { getChat } from \"@arpitbhalla/trio-calls/utils/chat.fetch\";\nimport { useEffect, useState } from \"react\";\nimport { useAppDispatch, useAppSelector } from \"core/hooks/redux\";\nimport { useSocket } from \"./useSocket\";\nimport { addChat, clearChat, initialChat } from \"core/reducers/chat\";\nimport { useSnackbar } from \"notistack\";\n\nexport const useMsgs = (meetID?: string) => {\n  const socketClient = useSocket();\n  const { enqueueSnackbar } = useSnackbar();\n  const [loading, setLoading] = useState(false);\n  const [meetTitle, setMeetTitle] = useState(\"\");\n  const { UID, displayName } = useAppSelector(\n    ({ authReducer: { UID, displayName } }) => ({\n      UID,\n      displayName,\n    })\n  );\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    if (!meetID) return;\n    resetChat();\n    setLoading(true);\n    getChat(UID, meetID)\n      .then((response) => {\n        dispatch(initialChat(response.chats));\n        setMeetTitle(response.meetTitle);\n        setLoading(false);\n      })\n      .catch((err) => {\n        enqueueSnackbar(err || \"Something went wrong\", {\n          variant: \"error\",\n        });\n      });\n  }, [meetID, UID]);\n\n  useEffect(() => {\n    if (!meetID) return;\n    socketEvents();\n  }, []);\n\n  const socketEvents = () => {\n    socketClient.on(\"newMessage\", (messageData) => {\n      console.log(messageData);\n      dispatch(\n        addChat({\n          MID: messageData._id,\n          UID: messageData.UID,\n          displayName: messageData.displayName || \"\",\n          message: messageData.message || \"\",\n          time: messageData.createdAt || \"\",\n        })\n      );\n    });\n  };\n\n  const sendMessage = React.useCallback((message: string) => {\n    socketClient.emit(\"sendMessage\", {\n      displayName,\n      message,\n      UID,\n    });\n  }, []);\n\n  const resetChat = () => {\n    dispatch(clearChat());\n  };\n\n  return { sendMessage, resetChat, loading, meetTitle };\n};\n"]},"metadata":{},"sourceType":"module"}