import * as React from 'react';
import { Canvas } from '../Canvas';
import { CanvasPath, ExportImageType, Point } from '../types';
export declare type ReactSketchCanvasProps = {
    width: string;
    height: string;
    className: string;
    strokeColor: string;
    canvasColor: string;
    backgroundImage: string;
    exportWithBackgroundImage: boolean;
    preserveBackgroundImageAspectRatio: string;
    strokeWidth: number;
    eraserWidth: number;
    allowOnlyPointerType: string;
    onUpdate: (updatedPaths: CanvasPath[]) => void;
    style: React.CSSProperties;
    withTimestamp: boolean;
};
export declare type ReactSketchCanvasStates = {
    drawMode: boolean;
    isDrawing: boolean;
    resetStack: CanvasPath[];
    undoStack: CanvasPath[];
    currentPaths: CanvasPath[];
};
export declare class ReactSketchCanvas extends React.Component<ReactSketchCanvasProps, ReactSketchCanvasStates> {
    static defaultProps: {
        width: string;
        height: string;
        className: string;
        canvasColor: string;
        strokeColor: string;
        backgroundImage: string;
        exportWithBackgroundImage: boolean;
        preserveBackgroundImageAspectRatio: string;
        strokeWidth: number;
        eraserWidth: number;
        allowOnlyPointerType: string;
        style: {
            border: string;
            borderRadius: string;
        };
        onUpdate: (_: CanvasPath[]) => void;
        withTimestamp: boolean;
    };
    svgCanvas: React.RefObject<Canvas>;
    initialState: {
        drawMode: boolean;
        isDrawing: boolean;
        resetStack: never[];
        undoStack: never[];
        currentPaths: never[];
    };
    constructor(props: ReactSketchCanvasProps);
    getSketchingTime(): Promise<number>;
    resetCanvas(): void;
    liftPathsUp(): void;
    handlePointerDown(point: Point): void;
    handlePointerMove(point: Point): void;
    handlePointerUp(): void;
    eraseMode(erase: boolean): void;
    clearCanvas(): void;
    undo(): void;
    redo(): void;
    exportImage(imageType: ExportImageType): Promise<string>;
    exportSvg(): Promise<string>;
    exportPaths(): Promise<CanvasPath[]>;
    loadPaths(paths: CanvasPath[]): void;
    render(): JSX.Element;
}
